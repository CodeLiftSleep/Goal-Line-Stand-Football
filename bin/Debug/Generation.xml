<?xml version="1.0"?>
<doc>
<assembly>
<name>
Generation
</name>
</assembly>
<members>
<member name="M:Generation.CollegePlayers.GetNFLPos(System.String)">
 <summary>
 Common Position switches include:
 QB ---> WR ---Typically very athletic QB's that aren't good enough at QB for the NFL(Julian Edelman for example)
 QB ---> RB ---Typically very athletic QB's that are option type QB's in college who do a lot of running(Michael Robinson for example)
 DE ---> OLB ---Typically "smaller", athletic DE's in college are too small to play DE in the NFL(Jerry Hughes for example)
 CB ---> SF ---Typically slower type CB's in college that have good ball and football instincts but lack the speed to cover WR's or hands to catch the ball in the NFL(Jairius Byrd, Aaron Williams, and Devin McCourty for example)
 WR ---> SF ---Typically slower type WR's that are good playing the ball but lack hands needed at WR(George Wilson for example)
 OT ---> OG ---Typically "smaller" OT's in college that are the size of guards in the NFL(one of the most common--numerous examples)
 LB ---> SF ---Typically "smaller" LB's in college that are athletic and fast enough to play safety but don't have enough size to play LB(Adam Archuleta for example)
 FB ---> TE ---Typically the more athletic FB's in college in a run heavy offensive scheme can make more use of their skills as a TE or H-Back(Charles Clay for example)
 other examples and less common changes occur---
 
 Need to figure out how often and under what circumstances a player would have a different position---currently it sets it to the same position as they are in college
 
 on offense: QB > WR(RB) > RB > FB > TE > OT > OG > OC
 
 CB > S > LB > DE > DT

 players are able To move up Or down 1 slot - so starting from most athletic To least athletic defensively you'd have CB > S > LB > DE > DT. 
 So all a corner could do Is move DOWN. Safeties can move UP Or DOWN to corner Or LB. Any player moving UP would need to have considerable athleticism.
</summary>
 <param name="Pos"></param>
 <returns></returns>
</member>
<member name="T:Generation.GeneralManager">
 <summary>
 Creates the GM's as requested by the number supplied.  32 GM's will randomly be placed on a team
 the other GM's will be unemployed and will have a chance to get hired when a GM gets fired
 </summary>
</member>
<member name="T:Generation.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Generation.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Generation.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Generation.NFLPlayers">
 <summary>
 Class for Generating NFL Players at game startup, ie, players that are already on a team
 </summary>
</member>
<member name="M:Generation.Owner.GenOwners(System.Int32)">
 <summary>
 Generates the number of owners/potential owners specified for the league
 only 32 are placed with a team, the other owners are "potential owners" that can
 buy the team from the current owner
 </summary>
 <param name="NumOwners"></param>
</member>
<member name="M:Generation.Person.LoadData">
 <summary>
 Calls the Sub PutDataInDT to load all data in the tables
 </summary>
</member>
<member name="M:Generation.Person.PutDataInDT(System.Data.DataTable,System.IO.StreamReader)">
 <summary>
 Takes a Data Table parameter and the file name parameter and then creates 3 seperate data tables for them.
 Loads Files to DataTables and then uses the datatables while generating to prevent constant opening and closing of files
 </summary>
 <param name="DT"></param>
 <param name="file"></param>
</member>
<member name="M:Generation.Person.GenNames(System.Data.DataTable,System.Int32,System.String,System.String)">
 <summary>
 Generates all the Data a "Person" would have 
 </summary>
 <param name="DTOutputTo"></param>
 <param name="Row"></param>
 <param name="PersonType"></param>
 <param name="Position"></param>
</member>
<member name="M:Generation.Person.GetDOB(System.Int32)">
 <summary>
 Returns the person's Date Of Birth
 </summary>
 <param name="Age"></param>
 <returns></returns>
</member>
<member name="M:Generation.Person.GenAge(System.String,System.String)">
 <summary>
 Generates the player age based on Person Type and in the case of NFL Player, by Position
 </summary>
 <param name="PersonType"></param>
 <param name="Position"></param>
 <returns></returns>
</member>
<member name="M:Generation.Person.GetDraftAge">
 <summary>
 Generates the draft age for a college player
 </summary>
 <returns></returns>
</member>
<member name="T:Generation.Personnel">
 <summary>
 These are the "Football" People on the team--GM's, Coaches and Scouts.  They all have football related evaluations they use contained in the functions below 
 </summary>
</member>
<member name="T:Generation.Players">
 <summary>
 This will be the parent class for both NFLPlayers and CollegePlayers.  
 </summary>
</member>
<member name="M:Generation.Players.GetSQLFields(System.String)">
 <summary>
 FieldNames for players will use the same attributes, but the College Players will have additional Combine related fields as well.
 </summary>
 <param name="PlayerType"></param>
 <returns></returns>
</member>
</members>
</doc>
