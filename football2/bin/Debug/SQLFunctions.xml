<?xml version="1.0"?>
<doc>
<assembly>
<name>
SQLFunctions
</name>
</assembly>
<members>
<member name="T:SQLFunctions.DataFunctions">
 <summary>
 For use with SQL Server---Deprecated as we have switched over to SQLite
 </summary>
</member>
<member name="T:SQLFunctions.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:SQLFunctions.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:SQLFunctions.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:SQLFunctions.SQLiteDataFunctions.GetConnectionString(System.String)">
 <summary>
 Opens a connection to this DB--Must Explicitly pass the connection string before returning it, otherwise it will throw a Null exception as the connection string will be Nothing.
 </summary>
 <param name="DBName"></param>
 <returns></returns>
</member>
<member name="M:SQLFunctions.SQLiteDataFunctions.CreateTable(System.String,System.Data.DataTable,System.String,System.String)">
 <summary>
 check to see if the table exists, if not then create one
 </summary>
 <param name="DBName"></param>
</member>
<member name="M:SQLFunctions.SQLiteDataFunctions.LoadTable(System.String,System.Data.DataTable,System.String)">
 <summary>
 Loads a Table from the DB.  If the table does not exist, it creates one
 </summary>
 <param name="DBName"></param>
 <param name="TableName"></param>
</member>
<member name="M:SQLFunctions.SQLiteDataFunctions.DeleteTable(System.String,System.Data.DataTable,System.String)">
 <summary>
 This will Keep the Actual Table, but simply Delete all the records in it
 </summary>
 <param name="DBName"></param>
 <param name="DT"></param>
 <param name="TableName"></param>
</member>
<member name="M:SQLFunctions.SQLiteDataFunctions.DropTable(System.String,System.Data.DataTable,System.String)">
 <summary>
 This completely removes the Table from the Database
 </summary>
 <param name="DBNAme"></param>
 <param name="DT"></param>
 <param name="TableName"></param>
</member>
<member name="M:SQLFunctions.SQLiteDataFunctions.BulkInsert(System.String,System.Data.DataTable,System.String)">
 <summary>
 Since there is no UpdateTable command like SQL Server, Bulk Insert Into will put all the rows from the DT into the DB
 </summary>
 <param name="DBName"></param>
 <param name="DT"></param>
 <param name="TableName"></param>
</member>
</members>
</doc>
