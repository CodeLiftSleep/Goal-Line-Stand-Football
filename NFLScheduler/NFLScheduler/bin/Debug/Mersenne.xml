<?xml version="1.0"?>
<doc>
<assembly>
<name>
Mersenne
</name>
</assembly>
<members>
<member name="M:Mersenne.CollegePlayers.GetNFLPos(System.String)">
 <summary>
 Common Position switches include:
 QB ---> WR ---Typically very athletic QB's that aren't good enough at QB for the NFL(Julian Edelman for example)
 QB ---> RB ---Typically very athletic QB's that are option type QB's in college who do a lot of running(Michael Robinson for example)
 DE ---> OLB ---Typically "smaller", athletic DE's in college are too small to play DE in the NFL(Jerry Hughes for example)
 CB ---> SF ---Typically slower type CB's in college that have good ball and football instincts but lack the speed to cover WR's or hands to catch the ball in the NFL(Jairius Byrd, Aaron Williams, and Devin McCourty for example)
 WR ---> SF ---Typically slower type WR's that are good playing the ball but lack hands needed at WR(George Wilson for example)
 OT ---> OG ---Typically "smaller" OT's in college that are the size of guards in the NFL(one of the most common--numerous examples)
 LB ---> SF ---Typically "smaller" LB's in college that are athletic and fast enough to play safety but don't have enough size to play LB(Adam Archuleta for example)
 FB ---> TE ---Typically the more athletic FB's in college in a run heavy offensive scheme can make more use of their skills as a TE or H-Back(Charles Clay for example)
 other examples and less common changes occur---
 
 Need to figure out how often and under what circumstances a player would have a different position---currently it sets it to the same position as they are in college
 
 on offense: QB > WR(RB) > RB > FB > TE > OT > OG > OC
 
 CB > S > LB > DE > DT

 players are able To move up Or down 1 slot - so starting from most athletic To least athletic defensively you'd have CB > S > LB > DE > DT. 
 So all a corner could do Is move DOWN. Safeties can move UP Or DOWN to corner Or LB. Any player moving UP would need to have considerable athleticism.
</summary>
 <param name="Pos"></param>
 <returns></returns>
</member>
<member name="T:Mersenne.GeneralManager">
 <summary>
 Creates the GM's as requested by the number supplied.  32 GM's will randomly be placed on a team
 the other GM's will be unemployed and will have a chance to get hired when a GM gets fired
 </summary>
</member>
<member name="T:Mersenne.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Mersenne.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Mersenne.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Mersenne.MersenneTwister">
 <summary>
 A random number generator With a uniform distribution Using the Mersenne 
 Twister algorithm.
 </summary>
</member>
<member name="M:Mersenne.MersenneTwister.#ctor">
 
 Create a new Mersenne Twister random number generator.
 
</member>
<member name="M:Mersenne.MersenneTwister.#ctor(System.UInt32)">
 
 Create a new Mersenne Twister random number generator with a
 particular seed.
 
 The seed for the generator. 
</member>
<member name="M:Mersenne.MersenneTwister.#ctor(System.UInt32[])">
 ''' Create a new Mersenne Twister random number generator with a ''' 
 particular initial key. 
 ''' ''' The initial key. 
</member>
<member name="M:Mersenne.MersenneTwister.GenerateUInt32">
 ''' Generates a random number between 0 and System.UInt32.MaxValue. 
</member>
<member name="M:Mersenne.MersenneTwister.GenerateInt32">
 ''' Generates a random integer between 0 and System.Int32.MaxValue.
</member>
<member name="M:Mersenne.MersenneTwister.GenerateInt32(System.Int32)">
 <summary>
   Generates a random Integer between 0 And maxValue. 
   The maximum value. Must be greater than zero. 
 </summary>
</member>
<member name="M:Mersenne.MersenneTwister.GenerateInt32(System.Int32,System.Int32)">
 ''' Generates a random integer between minValue and maxValue. ''' 
 ''' The lower bound. 
 ''' The upper bound. 
</member>
<member name="M:Mersenne.MersenneTwister.GenerateDouble">
 ''' Generates a random floating point number between 0 and 1. 
</member>
<member name="M:Mersenne.MersenneTwister.GetGaussian(System.Double,System.Double)">
 <summary>
 Returns a number based on a gaussian curve
 Takes the mean and the STD
 </summary>
 <param name="Mean"></param>
 <param name="StDev"></param>
 <returns></returns>
</member>
<member name="T:Mersenne.NFLPlayers">
 <summary>
 Class for Generating NFL Players at game startup, ie, players that are already on a team
 </summary>
</member>
<member name="M:Mersenne.Owner.GenOwners(System.Int32)">
 <summary>
 Generates the number of owners/potential owners specified for the league
 only 32 are placed with a team, the other owners are "potential owners" that can
 buy the team from the current owner
 </summary>
 <param name="NumOwners"></param>
</member>
<member name="M:Mersenne.Person.LoadData">
 <summary>
 Calls the Sub PutDataInDT to load all data in the tables
 </summary>
</member>
<member name="M:Mersenne.Person.PutDataInDT(System.Data.DataTable,System.IO.StreamReader)">
 <summary>
 Takes a Data Table parameter and the file name parameter and then creates 3 seperate data tables for them.
 Loads Files to DataTables and then uses the datatables while generating to prevent constant opening and closing of files
 </summary>
 <param name="DT"></param>
 <param name="file"></param>
</member>
<member name="M:Mersenne.Person.GenNames(System.Data.DataTable,System.Int32,System.String,System.String)">
 <summary>
 Generates all the Data a "Person" would have 
 </summary>
 <param name="DTOutputTo"></param>
 <param name="Row"></param>
 <param name="PersonType"></param>
 <param name="Position"></param>
</member>
<member name="M:Mersenne.Person.GetDOB(System.Int32)">
 <summary>
 Returns the person's Date Of Birth
 </summary>
 <param name="Age"></param>
 <returns></returns>
</member>
<member name="M:Mersenne.Person.GenAge(System.String,System.String)">
 <summary>
 Generates the player age based on Person Type and in the case of NFL Player, by Position
 </summary>
 <param name="PersonType"></param>
 <param name="Position"></param>
 <returns></returns>
</member>
<member name="M:Mersenne.Person.GetDraftAge">
 <summary>
 Generates the draft age for a college player
 </summary>
 <returns></returns>
</member>
<member name="T:Mersenne.Personnel">
 <summary>
 These are the "Football" People on the team--GM's, Coaches and Scouts.  They all have football related evaluations they use contained in the functions below 
 </summary>
</member>
<member name="T:Mersenne.Players">
 <summary>
 This will be the parent class for both NFLPlayers and CollegePlayers.  
 </summary>
</member>
<member name="M:Mersenne.Players.GetSQLFields(System.String)">
 <summary>
 FieldNames for players will use the same attributes, but the College Players will have additional Combine related fields as well.
 </summary>
 <param name="PlayerType"></param>
 <returns></returns>
</member>
<member name="M:Mersenne.Scheduler.GetSchedule(System.Int32)">
 <summary>
 Creates a schedule following all appropriate NFL Rules.  No more than 3 consecutive home or away games.  Teams may not play each other in consecutive weeks
 CHECKS:
 1) If the game is a divisional game---ensure the same teams didn't play the week before
 2) Can every team play a game this week if this game gets scheduled---if yes, continue, if no, redo the weekly schedule.
 3) If over 60 attempts are made and a weekly schedule still cannot be made---restart entire schedule over again
 4) 
 </summary>
 <param name="NumGames"></param>
</member>
<member name="M:Mersenne.Scheduler.ScheduleDivGames">
 <summary>
 Schedules 1 Home and 1 Away game against each team in the same division
 </summary>
</member>
<member name="M:Mersenne.Scheduler.ScheduleInConfGames">
 <summary>
 Each division plays one other division in the same conference each year.
 </summary>
</member>
<member name="M:Mersenne.Scheduler.OutofConfGames">
 <summary>
 Schedules out of conference games for each division against another division in the other conference(ie, AFC East Vs. NFC South)
 </summary>
</member>
<member name="M:Mersenne.Scheduler.InConfFinish">
<summary>In the NFL, each team plays 12 games in their own conference. 6 games are played against teams in their division(the teams play twice),
4 games are played against a single other division(each team played once), and the remaining two games are played against the other 2 divisions' teams
that finished in the same place in their division(ie, 3rd place team from Div1 plays 3rd place team from Div3 and Div4 because they already are playing</summary> 
</member>
<member name="M:Mersenne.Scheduler.EndWithDivisionGames(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>creates a schedule where the last 2 games in the season are divisional games. 
currently in the NFL the last 2 games each teams play every year are games within
the division. Takes the 4 Div teams from ScheduleDivGames and then schedules 2 games checking 
to make sure they both can be played and are not both the same game</summary>
</member>
<member name="M:Mersenne.Scheduler.GetByeWeek">
 <summary>
 There are 12 possible bye week configurations, which range from 6 bye weeks to 9 bye weeks.  This will randomly select a bye week configuration to use for the schedule
 </summary>
</member>
<member name="M:Mersenne.Scheduler.CanGameBePlayed(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Checks to see if every other team has a game that can be played this week if this game gets scheduled. Returns True if all other teams can play a game and false if they cannot
 </summary>
 <param name="weeknum"></param>
 <param name="Games"></param>
 <param name="Home"></param>
 <param name="Away"></param>
 <returns></returns>
</member>
<member name="M:Mersenne.Scheduler.CanNextWeekBePlayed(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 After each weeks games are scheduled, this Sub checks to make sure each team has a game that can be played the following week. If not, the current week schedule is redone
 </summary>
 <param name="weeknum"></param>
 <param name="Games"></param>
</member>
</members>
</doc>
